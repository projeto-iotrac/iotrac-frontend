import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import Colors from '../constants/Colors';
import StandardHeader from '../components/StandardHeader';
import { API_CONFIG } from '../constants/ApiConfig';
import { useAuth } from '../contexts/AuthContext';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  isLoading?: boolean;
}

export default function ArgosBotScreen() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollViewRef = useRef<ScrollView>(null);
  const { token } = useAuth();

  useEffect(() => {
    // Mensagem de boas-vindas inicial (curta)
    const welcomeMessage: Message = {
      id: '0',
      text: `Ol√°! Eu sou Argos, a intelig√™ncia artificial integrada ao aplicativo IOTRAC, projetado para elevar a seguran√ßa dos seus dispositivos IoT.\n\nAbaixo temos op√ß√µes de perguntar para que possamos iniciar nossa sess√£o:\n\nüèõÔ∏è "Quero saber mais sobre as fun√ß√µes e a hist√≥ria do Argos."\n\nüõ°Ô∏è "Quero entender como funciona o sistema de prote√ß√£o do IOTRAC."`,
      isUser: false,
      timestamp: new Date(),
    };
    
    setMessages([welcomeMessage]);
  }, []);

  useEffect(() => {
    // Scroll para a √∫ltima mensagem
    setTimeout(() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }, 100);
  }, [messages]);

  const sendMessage = async (forcedText?: string) => {
    const textToSend = (forcedText ?? inputText).trim();
    if (!textToSend) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: textToSend,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    try {
      // Tentar backend real primeiro
      const headers: Record<string, string> = { 'Content-Type': 'application/json' };
      if (token) headers['Authorization'] = `Bearer ${token}`;

      const resp = await fetch(`${API_CONFIG.BASE_URL}/ai/query`, {
        method: 'POST',
        headers,
        body: JSON.stringify({ query: userMessage.text })
      });
      let data: any = {};
      try { data = await resp.json(); } catch {}

      let botText = '';
      if (resp.ok && data?.success && data?.response?.message) {
        botText = String(data.response.message);
      } else {
        // Fallback local (heur√≠stico)
        botText = generateBotResponse(userMessage.text);
      }

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botText,
        isUser: false,
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, botMessage]);
    } catch (_) {
      // Fallback em caso de erro de rede
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: generateBotResponse(userMessage.text),
        isUser: false,
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, botMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const generateBotResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    // Respostas espec√≠ficas para as op√ß√µes iniciais
    if (input.includes('fun√ß√µes') && input.includes('hist√≥ria') && input.includes('argos')) {
      return `üèõÔ∏è **Mem√≥ria de Argos**

**Introdu√ß√£o**
Meu nome √© inspirado na mitologia grega, onde Argos Panoptes (tamb√©m conhecido como Argos, o "todo-vidente") era um gigante com cem olhos, famoso por sua vigil√¢ncia inabal√°vel. Na lenda, ele foi incumbido pela deusa Hera. Com seus cem olhos distribu√≠dos pelo corpo, Argos podia vigiar em todas as dire√ß√µes simultaneamente, dormindo apenas com alguns olhos enquanto os outros permaneciam abertos. Assim como esse guardi√£o mitol√≥gico, eu estou aqui para monitorar e proteger seus dispositivos conectados em tempo real, garantindo uma vigil√¢ncia constante e infal√≠vel contra amea√ßas.

**Minha Miss√£o**
Minha miss√£o principal √© guiar sua experi√™ncia no IOTRAC, atuando como um aliado proativo na seguran√ßa digital. Eu n√£o sou apenas um chatbot; sou o cora√ß√£o inteligente do sistema, respons√°vel por detectar anomalias, fornecer orienta√ß√µes e esclarecer d√∫vidas para tornar seu ambiente conectado mais seguro.

**Fun√ß√µes Espec√≠ficas**
Aqui v√£o algumas das minhas fun√ß√µes principais na prote√ß√£o do IOTRAC:

- **Detec√ß√£o de Anomalias**: Varredura cont√≠nua em busca de comportamentos suspeitos nos dispositivos IoT conectados, identificando amea√ßas potenciais antes que elas se tornem problemas.

- **Orienta√ß√µes de Seguran√ßa**: Forne√ßo dicas pr√°ticas e personalizadas para fortalecer a prote√ß√£o dos seus dispositivos, indo al√©m das capacidades do app. Por exemplo, para proteger o sinal da chave do seu carro aut√¥nomo, recomendo o uso de uma carteira anti-roubo de sinal (como uma bolsa Faraday), que bloqueia tentativas de intercepta√ß√£o remota.

- **Esclarecimento de D√∫vidas**: Estou programado para resolver d√∫vidas sobre ataques cibern√©ticos, alertas de seguran√ßa e como interpretar notifica√ß√µes do sistema, ajudando voc√™ a entender e responder a potenciais riscos.

- **A√ß√µes de Prote√ß√£o Diretas**: Voc√™ pode me pedir para executar a√ß√µes de prote√ß√£o diretamente nos dispositivos conectados, como bloquear acessos suspeitos ou ativar modos de defesa. No entanto, eu n√£o executo nenhum comando no sistema sem a sua autoriza√ß√£o expl√≠cita, garantindo que voc√™ mantenha o controle total.

- **Monitoramento e Alertas**: Acompanho o tr√°fego de rede, padr√µes de uso e vulnerabilidades em tempo real, enviando alertas imediatos quando necess√°rio.

**Lembre-se**: a seguran√ßa √© uma parceria. Conte comigo para tornar seu mundo conectado mais protegido! üõ°Ô∏è`;
    }
    
    if (input.includes('sistema') && input.includes('prote√ß√£o') && input.includes('iotrac')) {
      return `üõ°Ô∏è **Sistema de Prote√ß√£o IOTRAC**

O IOTRAC implementa m√∫ltiplas camadas de seguran√ßa para proteger seus dispositivos IoT:

**Camada 1 - Autentica√ß√£o e Autoriza√ß√£o**
- Autentica√ß√£o multi-fator (2FA) obrigat√≥ria
- Controle de acesso baseado em fun√ß√µes (RBAC)
- Tokens JWT com renova√ß√£o autom√°tica
- Criptografia AES-256 para dados sens√≠veis

**Camada 2 - Monitoramento Ativo**
- Detec√ß√£o de anomalias em tempo real
- An√°lise de padr√µes de tr√°fego suspeitos
- Alertas autom√°ticos para comportamentos an√¥malos
- Log completo de todas as atividades

**Camada 3 - Prote√ß√£o de Dispositivos**
- Intercepta√ß√£o e valida√ß√£o de comandos
- Bloqueio autom√°tico de a√ß√µes suspeitas
- Prote√ß√£o HMAC contra adultera√ß√£o
- Quarentena de dispositivos comprometidos

**Camada 4 - Intelig√™ncia Artificial**
- Eu, Argos, analiso continuamente os dados
- Predi√ß√£o de amea√ßas baseada em ML
- Recomenda√ß√µes personalizadas de seguran√ßa
- Resposta automatizada a incidentes

**Funcionalidades Especiais**:
- Modo de prote√ß√£o ativ√°vel por dispositivo
- Notifica√ß√µes push em tempo real
- Dashboard de seguran√ßa centralizado
- Relat√≥rios detalhados de atividades

Como posso ajud√°-lo a configurar ou entender melhor alguma dessas prote√ß√µes? üîê`;
    }

    // Respostas existentes (mantidas)
    if (input.includes('status') || input.includes('dispositivos')) {
      return 'Monitorando todos os dispositivos conectados. Atualmente n√£o h√° alertas cr√≠ticos. Todos os sistemas est√£o operacionais e seguros.';
    }
    
    if (input.includes('seguran√ßa') || input.includes('prote√ß√£o')) {
      return 'Recomendo:\n- Manter todos os dispositivos atualizados\n- Usar senhas √∫nicas e fortes\n- Ativar autentica√ß√£o de dois fatores\n- Monitorar regularmente os logs de atividade\n\nPosso ajudar com configura√ß√µes espec√≠ficas?';
    }
    
    if (input.includes('logs') || input.includes('atividade')) {
      return 'Analisando logs recentes... Encontrei:\n- 15 conex√µes normais nas √∫ltimas 24h\n- 2 tentativas de acesso bloqueadas\n- 0 anomalias cr√≠ticas detectadas\n\nGostaria de ver detalhes espec√≠ficos?';
    }
    
    if (input.includes('anomalia') || input.includes('suspeito')) {
      return 'Sistema de detec√ß√£o de anomalias ativo. Par√¢metros monitorados:\n- Padr√µes de tr√°fego incomuns\n- Tentativas de acesso n√£o autorizadas\n- Comandos fora do padr√£o normal\n- Hor√°rios at√≠picos de atividade\n\nTudo normal no momento.';
    }
    
    if (input.includes('comandos') || input.includes('controle')) {
      return 'Posso ajudar com:\n- Ativar/desativar prote√ß√£o de dispositivos\n- Bloquear dispositivos suspeitos\n- Gerar relat√≥rios de seguran√ßa\n- Configurar alertas personalizados\n\nQual comando voc√™ gostaria de executar?';
    }
    
    if (input.includes('ajuda') || input.includes('help')) {
      return 'Como Argos, posso ajud√°-lo com:\n- Monitoramento de dispositivos IoT\n- An√°lise de seguran√ßa em tempo real\n- Detec√ß√£o de anomalias\n- Configura√ß√µes de prote√ß√£o\n- Relat√≥rios e logs detalhados\n\nO que voc√™ gostaria de saber?';
    }
    
    // Resposta padr√£o atualizada (curta)
    return `Ol√°! Eu sou Argos, a intelig√™ncia artificial integrada ao aplicativo IOTRAC, projetado para elevar a seguran√ßa dos seus dispositivos IoT.\n\nAbaixo temos op√ß√µes de perguntar para que possamos iniciar nossa sess√£o:\n\nüèõÔ∏è "Quero saber mais sobre as fun√ß√µes e a hist√≥ria do Argos."\n\nüõ°Ô∏è "Quero entender como funciona o sistema de prote√ß√£o do IOTRAC."`;
  };

  const handleQuickAction = (action: string) => {
    // Enviar diretamente a a√ß√£o como mensagem do usu√°rio
    void sendMessage(action);
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      {/* Header padr√£o com barra azul e logo IOTRAC (sem t√≠tulo colorido) */}
      <StandardHeader />
      {/* T√≠tulo neutro e cru abaixo do header */}
      <View style={{ paddingHorizontal: 16, paddingVertical: 16, backgroundColor: '#fff', borderBottomWidth: 1, borderBottomColor: '#e0e0e0' }}>
        <Text style={{ fontSize: 24, fontWeight: 'bold', color: '#000' }}>Argos Bot</Text>
      </View>
      
      {/* Mensagens */}
      <ScrollView
        ref={scrollViewRef}
        style={styles.messagesContainer}
        showsVerticalScrollIndicator={false}
      >
        {messages.map((message) => (
          <View
            key={message.id}
            style={[
              styles.messageContainer,
              message.isUser ? styles.userMessage : styles.botMessage,
            ]}
          >
            {!message.isUser && (
              <View style={styles.botMessageAvatar} />
            )}
            
            <View
              style={[
                styles.messageBubble,
                message.isUser ? styles.userBubble : styles.botBubble,
              ]}
            >
              <Text
                style={[
                  styles.messageText,
                  message.isUser ? styles.userMessageText : styles.botMessageText,
                ]}
              >
                {message.text}
              </Text>
              <Text style={styles.messageTime}>
                {message.timestamp.toLocaleTimeString('pt-BR', {
                  hour: '2-digit',
                  minute: '2-digit',
                })}
              </Text>
            </View>
          </View>
        ))}
        
        {isTyping && (
          <View style={styles.typingIndicator}>
            <View style={styles.botMessageAvatar} />
            <View style={styles.typingBubble}>
              <ActivityIndicator size="small" color="#666" />
              <Text style={styles.typingText}>Argos est√° digitando...</Text>
            </View>
          </View>
        )}
      </ScrollView>

      {/* A√ß√µes R√°pidas */}
      <View style={styles.quickActions}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <TouchableOpacity 
            style={styles.quickActionButton} 
            onPress={() => handleQuickAction('Quero saber mais sobre as fun√ß√µes e a hist√≥ria do Argos.')}
            activeOpacity={0.6}
          >
            <Text style={styles.quickActionText}>üèõÔ∏è Hist√≥ria do Argos</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={styles.quickActionButton} 
            onPress={() => handleQuickAction('Quero entender como funciona o sistema de prote√ß√£o do IOTRAC.')}
            activeOpacity={0.6}
          >
            <Text style={styles.quickActionText}>üõ°Ô∏è Sistema de Prote√ß√£o</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={styles.quickActionButton} 
            onPress={() => handleQuickAction('status dos dispositivos')}
          >
            <Text style={styles.quickActionText}>Status</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={styles.quickActionButton} 
            onPress={() => handleQuickAction('configura√ß√µes de seguran√ßa')}
          >
            <Text style={styles.quickActionText}>Seguran√ßa</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={styles.quickActionButton} 
            onPress={() => handleQuickAction('an√°lise de logs')}
          >
            <Text style={styles.quickActionText}>Logs</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={styles.quickActionButton} 
            onPress={() => handleQuickAction('comandos de prote√ß√£o')}
          >
            <Text style={styles.quickActionText}>Comandos</Text>
          </TouchableOpacity>
        </ScrollView>
      </View>

      {/* Input de Mensagem */}
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.textInput}
          value={inputText}
          onChangeText={setInputText}
          placeholder="Digite sua mensagem..."
          multiline
          maxLength={500}
        />
        <TouchableOpacity
          style={[styles.sendButton, !inputText.trim() && styles.sendButtonDisabled]}
          onPress={() => sendMessage()}
          disabled={!inputText.trim()}
        >
          <Ionicons
            name="send"
            size={20}
            color={inputText.trim() ? '#000' : '#bbb'}
          />
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  messagesContainer: {
    flex: 1,
    padding: 12,
    backgroundColor: '#ffffff',
  },
  messageContainer: {
    flexDirection: 'row',
    marginBottom: 12,
    alignItems: 'flex-end',
  },
  userMessage: {
    justifyContent: 'flex-end',
  },
  botMessage: {
    justifyContent: 'flex-start',
  },
  botMessageAvatar: {
    width: 0,
    height: 0,
    marginRight: 0,
    display: 'none',
  },
  messageBubble: {
    maxWidth: '100%',
    padding: 10,
    borderRadius: 0,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#d0d0d0',
  },
  userBubble: {
    backgroundColor: '#fff',
    borderBottomRightRadius: 0,
    borderWidth: 1,
    borderColor: '#d0d0d0',
  },
  botBubble: {
    backgroundColor: '#fff',
    borderBottomLeftRadius: 0,
    borderWidth: 1,
    borderColor: '#d0d0d0',
  },
  messageText: {
    fontSize: 15,
    lineHeight: 21,
  },
  userMessageText: {
    color: '#000',
  },
  botMessageText: {
    color: '#000',
  },
  messageTime: {
    fontSize: 11,
    color: '#888',
    marginTop: 4,
    alignSelf: 'flex-end',
  },
  typingIndicator: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    marginBottom: 12,
  },
  typingBubble: {
    backgroundColor: '#fff',
    padding: 10,
    borderRadius: 0,
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#d0d0d0',
    gap: 8,
  },
  typingText: {
    fontSize: 13,
    color: '#444',
  },
  quickActions: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  quickActionButton: {
    backgroundColor: '#fff',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 0,
    marginRight: 8,
    borderWidth: 1,
    borderColor: '#cfcfcf',
  },
  quickActionText: {
    fontSize: 14,
    color: '#222',
    fontWeight: '400',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    padding: 12,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  textInput: {
    flex: 1,
    backgroundColor: '#fff',
    borderRadius: 0,
    paddingHorizontal: 10,
    paddingVertical: 10,
    maxHeight: 100,
    fontSize: 15,
    marginRight: 8,
    borderWidth: 1,
    borderColor: '#cfcfcf',
  },
  sendButton: {
    width: 44,
    height: 44,
    borderRadius: 0,
    backgroundColor: '#ddd',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#cfcfcf',
  },
  sendButtonDisabled: {
    backgroundColor: '#eee',
  },
}); 